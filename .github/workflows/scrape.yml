name: Scrape latest hospital data

on:
  push:
  workflow_dispatch:
  schedule:
    - cron: '15 */1 * * *' # At minute 15 past every hour

jobs:
  scheduled:
    runs-on: ubuntu-latest
    steps:
      - name: Check out this repo
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4 gitpython sqlite-utils
      
      - name: Fetch latest data
        run: python scrape_hospital_data.py

      - name: Detect changes and stage files
        id: file_check
        run: |
          git add .  # Stage all changes, including new files.
          if git diff --staged --quiet; then
            echo "No changes to commit."
            echo "::set-output name=changed::false"
          else
            echo "Changes detected, preparing to commit."
            echo "::set-output name=changed::true"
          fi

      - name: Generate timestamp for commit message
        if: steps.file_check.outputs.changed == 'true'
        run: echo "TIMESTAMP=$(date -u +'%Y%m%d%H%M%S')" >> $GITHUB_ENV

      - name: Copy hospital_data.json with timestamp if changed
        if: steps.file_check.outputs.changed == 'true'
        run: |
          mkdir -p data
          cp hospital_data.json data/hospital_data_${TIMESTAMP}.json
          git add data/hospital_data_${TIMESTAMP}.json
          echo "hospital_data.json copied with timestamp: ${TIMESTAMP}."

      - name: Pull latest changes from remote
        if: steps.file_check.outputs.changed == 'true'
        run: |
          git pull --no-edit origin main

      - name: Commit and push if changes detected
        if: steps.file_check.outputs.changed == 'true'
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git commit -m "Update hospital_data.json with timestamp: ${TIMESTAMP}"
          git push origin main



